package io.joern.solidity2cpg.vulnerability

import io.joern.solidity2cpg.testfixtures.SolidityCodeToCpgFixture
import io.shiftleft.semanticcpg.language.{toNodeTypeStarters, _}

class ReentrancyTest extends SolidityCodeToCpgFixture {
  implicit val resolver: ICallResolver = NoResolve
  override val code: String =
    """
      |pragma solidity ^0.8.0;
      |
      |contract Foo {
      |
      |  address payable winner = payable(msg.sender);
      |  bool prizePaidOut;
      |  bool gameHasEnded;
      |
      |  function send_payment() public {
      |    if (gameHasEnded && !(prizePaidOut)) {
      |      winner.send(1000); // send a prize to the winner
      |      prizePaidOut = true;
      |    }
      |  }
      |
      |  function safe_send_payment() public {
      |    if (gameHasEnded && !(prizePaidOut)) {
      |      if (winner.send(1000))
      |        prizePaidOut = true;
      |      else revert();
      |    }
      |  }
      |
      |}
    """.stripMargin

  "Reentrancy" in {
    {
//      println(cpg.typeDecl.dotAst.head)
//      println(cpg.call.name(".*send.*").code.l)
//      println(cpg.call.name(".*send.*").receiver.dominates.code.l)
//      println(cpg.call.name(".*send.*").receiver.code.l)
//      println(cpg.call.name(".*send.*").receiver.dominates.code.l)
      cpg.call
        .name(".*send.*")
        .where(_.receiver.dominates.containsCallTo(".*revert.*"))
    }.l.foreach(x => println(x.traversal.method.next().name))
  }
//  (1,TYPE_DECL,Foo)
//  (1,METHOD,function send_payment() public)
//  (null,MODIFIER,public)
//  (0,METHOD_PARAMETER_IN,this)
//  (1,BLOCK,null)
//  (1,CONTROL_STRUCTURE,if (gameHasEnded && !prizePaidOut))
//  (1,CALL,gameHasEnded && !prizePaidOut)
//  (1,CALL,gameHasEnded)
//  (1,IDENTIFIER,this)
//  (2,FIELD_IDENTIFIER,gameHasEnded)
//  (2,CALL,!prizePaidOut)
//  (1,CALL,prizePaidOut)
//  (1,IDENTIFIER,this)
//  (2,FIELD_IDENTIFIER,prizePaidOut)
//  (2,BLOCK,null)
//  (2,CALL,<operator>.fieldAccess.send(1000))
//  (3,CALL,<operator>.fieldAccess.send)
//  (3,CALL,winner)
//  (1,IDENTIFIER,this)
//  (2,FIELD_IDENTIFIER,winner)
//  (2,FIELD_IDENTIFIER,<operator>.fieldAccess)
//  (1,LITERAL,1000)
//  (3,CALL,prizePaidOut = true)
//  (1,CALL,prizePaidOut)
//  (1,IDENTIFIER,this)
//  (2,FIELD_IDENTIFIER,prizePaidOut)
//  (2,LITERAL,true)
//  (2,METHOD_RETURN,void)
//  (2,METHOD,function safe_send_payment() public)
//  (null,MODIFIER,public)
//  (0,METHOD_PARAMETER_IN,this)
//  (1,BLOCK,null)
//  (1,CONTROL_STRUCTURE,if (gameHasEnded && !prizePaidOut))
//  (1,CALL,gameHasEnded && !prizePaidOut)
//  (1,CALL,gameHasEnded)
//  (1,IDENTIFIER,this)
//  (2,FIELD_IDENTIFIER,gameHasEnded)
//  (2,CALL,!prizePaidOut)
//  (1,CALL,prizePaidOut)
//  (1,IDENTIFIER,this)
//  (2,FIELD_IDENTIFIER,prizePaidOut)
//  (2,BLOCK,null)
//  (1,CONTROL_STRUCTURE,if (<operator>.fieldAccess.send(1000)))
//    (1,CALL,<operator>.fieldAccess.send(1000))
//      (2,CALL,<operator>.fieldAccess.send)
//        (2,CALL,winner)
//        (1,IDENTIFIER,this)
//        (2,FIELD_IDENTIFIER,winner)
//        (2,FIELD_IDENTIFIER,<operator>.fieldAccess)
//          (1,LITERAL,1000)
//          (2,CALL,prizePaidOut = true)
//          (1,CALL,prizePaidOut)
//          (1,IDENTIFIER,this)
//          (2,FIELD_IDENTIFIER,prizePaidOut)
//          (2,LITERAL,true)
//          (3,CONTROL_STRUCTURE,else)
//          (1,CALL,revert())
//          (2,IDENTIFIER,revert)
//          (2,METHOD_RETURN,void)
//          (2,MEMBER,address default winner)
//          (3,MEMBER,bool default prizePaidOut)
//          (4,MEMBER,bool default gameHasEnded)

}
