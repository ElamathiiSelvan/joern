package io.joern.solidity2cpg.vulnerability

import io.joern.solidity2cpg.testfixtures.SolidityCodeToCpgFixture
import io.shiftleft.codepropertygraph.generated.Operators
import io.shiftleft.semanticcpg.language.{toNodeTypeStarters, _}
class AbiEncoderTest extends SolidityCodeToCpgFixture{
override val code : String = {
  """
    |pragma solidity 0.4.7;
    |contract A {
    |    uint[2][3] bad_arr = [[1, 2], [3, 4], [5, 6]];
    |
    |    /* Array of arrays passed to abi.encode is vulnerable */
    |    function bad() public {
    |        bytes memory b = abi.encode(bad_arr);
    |    }
    |}""".stripMargin



}
//TODO problem in cpg is that we dont store the version of solidity so I dont know how to solve this.
  "abi.encode had a bug from 0.4.7 to 0.5.9" in {
    {
      val version = cpg.configFile.next().content.split("\\.")
      println(version.length)

//      if (version(0).toInt== 0 & version(1).toInt < 4 ) {
        def findAbiEncoder = cpg.call
          .filter(cpg.configFile.next().content.split("\\.")(0).toInt == 0)
          .where(_.methodFullName(Operators.assignment))
          .where(_.argument.isCall.name("encode"))

        findAbiEncoder
    }.l.foreach(x => x.traversal.method.name.l shouldBe List("bad"))
  }
}
