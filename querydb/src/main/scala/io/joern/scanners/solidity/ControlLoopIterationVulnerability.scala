package io.joern.scanners.solidity
import io.joern.scanners._
import io.shiftleft.semanticcpg.language._
import io.joern.console._
import io.joern.macros.QueryMacros._
import io.joern.dataflowengineoss.language._
import io.joern.dataflowengineoss.queryengine.EngineContext
import io.shiftleft.codepropertygraph.generated.{ModifierTypes, Operators}
import io.shiftleft.codepropertygraph.generated.nodes.AstNode
object ControlLoopIterationVulnerability extends QueryBundle {
  implicit val resolver: ICallResolver = NoResolve

  @q
  def isControlLoopIterationVulnerability()(implicit context: EngineContext): Query =
    Query.make(
      name = "control-loop-iteration ",
      author = Crew.tam,
      title = "isControlLoopIterationVulnerability method is able to check that conditions of loop are tainted",
      description =
        """
          |An attacker can call a method that can change the range in which a
          |loop should loop to, this means that with large runs the loops can cause
          |denial of service attacks on contracts.
          |""".stripMargin,
      score = 5,
      withStrRep({ cpg =>
      {
        def test = cpg.controlStructure.condition.isCall.argument(2).code.next()
        def sink = cpg.method
          .where(_.hasModifier(ModifierTypes.PUBLIC))
          .call
          .name(s"${Operators.assignment}.*")
          .where(_.argument.isCall.nameExact(Operators.fieldAccess))
          .code(s"${test}.*")

        def source = cpg.method.parameter
        println(sink.reachableByFlows(source).p)
//        sink.reachableByFlows(source)
        source
      }

      }),
      tags = List(QueryTags.selfDestruct, QueryTags.default),
      codeExamples = CodeExamples(List(
        """
          |contract C{
          |    uint n;
          |
          |    function set(uint _n) public{
          |        n = _n;
          |    }
          |
          |    function bad() public{
          |        uint i;
          |        uint counter;
          |        for(i=0; i<n; i++){
          |            counter = i;
          |        }
          |    }
          |}
          |""".stripMargin), List(
        """
          |contract C{
          |    uint n;
          |
          |    function set(uint _n) public{
          |        n = _n;
          |    }
          |
          |    function bad() public{
          |        uint i;
          |        uint counter;
          |        for(i=0; i<n; i++){
          |            counter = i;
          |        }
          |    }
          |}
          |""".stripMargin))
    )
}
